version: '3.8'

services:

  sonarqube:
    image: sonarqube:8.9.9-community
    container_name: sonarqube
    ports:
      - "${SONAR_SERVER_PORT}:9000"
    links:
      - db
    environment:
      - SONAR_JDBC_URL=${DB_URL}
      - SONAR_JDBC_USERNAME=${DB_USERNAME}
      - SONAR_JDBC_PASSWORD=${DB_PASSWORD}
    volumes:
      - sonarqube_conf:/opt/sonarqube/conf
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_bundled-plugins:/opt/sonarqube/lib/bundled-plugins
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonarqube.rule=Host(`${SONARQUBE_VIRTUAL_HOST:-sonarqube.localdomain}`)
      - traefik.http.routers.sonarqube.entrypoints=${SONARQUBE_ENTRYPOINTS:-web}
      - traefik.http.services.sonarqube.loadbalancer.server.port=9000
    network_mode: bridge
    restart: unless-stopped

  db:
    image: postgres:13-alpine
    container_name: db
    expose:
      - 5432
    healthcheck:
      test: pg_isready -d ${DB_NAME} -U ${DB_USERNAME} && echo OK
      retries: 3
      timeout: 3s
    environment:
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - sonarqube_db:/var/lib/postgresql10
      - postgresql_data:/var/lib/postgresql10/data
    network_mode: bridge
    restart: unless-stopped

  sonar-scanner:
    image: sonarsource/sonar-scanner-cli
    external_links:
      - sonarqube:sonarqube
    environment:
      - SONAR_HOST_URL=http://sonarqube:9000
      - SONAR_LOGIN=${SONAR_TOKEN}
      - BROWSERSLIST_IGNORE_OLD_DATA=true
    volumes:
      - ../:/usr/src
      - ./conf/sonar-scanner.properties:/opt/sonar-scanner/conf/sonar-scanner.properties
    network_mode: bridge
    restart: 'no'
